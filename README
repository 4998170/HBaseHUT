HBaseHUT:
---------
http://github.com/sematext/HBaseHUT

Mailing List:
-------------
To participate more in the discussion, join the group at
https://groups.google.com/group/hbasehut/

Description:
------------
HBaseHUT stands for High Updates Throughput for HBase. It was inspired by
discussions on HBase mailing lists around the problem with having Get&Put
for each update operation, which affects write throughput dramatically.
Another force behind behind the approach used in HBaseHUT was recent
activity on Coprocessors development.  Although usage of CPs is very limited
in the current implementation (see CPs branch) HBaseHUT is designed with
broader use of CPs in mind because they add more
flexibility when it comes to alternative MapReduce data processing
approaches in addition to allowing seamlessly integrate the logic in places
where it makes the work to be performed in the most efficient way.

The idea behind HBaseHUT is:
* Don't do updates of existing data on each Put (and hence don't perform
  Get operation for each Put operation). All Puts are plain Puts with the
  relevant pure-insert write performance.
* Defer processing updates to scheduled job (not necessarily a MapReduce job)
  or perform updates on as-needed basis.
* Serve updated data in "online" manner: user always gets updated record
  immediately after new data was Put, i.e., user "sees" updates immediately
  after he writes data.

In addition to allowing real-time data processing where it wasn't possible
before (where batch processing was used due to update throughput limitations)
HBaseHUT also adds such a major feature as ability to roll back changes.

For more information please refer to the github project wiki:
https://github.com/sematext/HBaseHUT/wiki.

For a clear introductory post with a good HBaseHUT use-case read/watch:
http://blog.sematext.com/2010/12/16/deferring-processing-updates-to-increase-hbase-write-performance/
http://blog.sematext.com/2012/04/22/hbase-real-time-analytics-rollbacks-via-append-based-updates/
http://blog.sematext.com/2012/04/27/hbase-real-time-analytics-rollbacks-via-append-based-updates-part-2/
http://vimeo.com/26813019
http://www.slideshare.net/alexbaranau/realtime-analytics-with-hbase-short-version
http://www.slideshare.net/alexbaranau/realtime-analytics-with-hbase-long-version

Build Notes:
------------
Current pom configured to build against HBase 0.90.4 (cdh3u3). The project
start date goes back to the time when 0.89.20100924 was the latest version
available. The code should be compatible with it too (and any version after it).
CPs branch is configured to be run on HBase 0.92.xx (first CPs-capable release).

Note: unit-tests take some time to execute (up to several minutes), to skip
their execution use -Dmaven.skip.tests=true.

HBase Version Compatibility:
----------------------------
Compatible with HBase 0.20.5 - 0.92.xxx
May be compatible with older: tests needed (TODO)

Released under Apache License 2.0.

Author:
-------
Alex Baranau